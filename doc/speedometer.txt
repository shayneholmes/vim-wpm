*speedometer.txt*                     Show how fast you're typing into a buffer.

                    ━━━ ┏━┓┏━┓┏━╸┏━╸╺┳┓┏━┓┏┳┓┏━╸╺┳╸┏━╸┏━┓~
                   ━ ━━ ┗━┓┣━┛┣╸ ┣╸  ┃┃┃ ┃┃┃┃┣╸  ┃ ┣╸ ┣┳┛~
                  ━━━ ━ ┗━┛╹  ┗━╸┗━╸╺┻┛┗━┛╹ ╹┗━╸ ╹ ┗━╸╹┗╸~

Author: Shayne Holmes <http://shayneholm.es/>
Repo:   https://github.com/shayneholmes/vim-wpm

==============================================================================
Introduction                                          *speedometer-introduction*

Shows your current typing speed, measured over a sliding ten-second window
that is reset whenever you enter insert mode.

Speed measures increase in buffer size, not keystroke count: backspaces and
other deletion commands are counterproductive churn.

==============================================================================
Commands and usage                                           *speedometer-usage*

If `airline` is active, Speedometer will auto-register itself to the 'Z'
section.

You can register it manually, using the expression value `SpeedometerValue()`
in `'statusline'` or `'rulerformat'`:

  let &rulerformat = "%{SpeedometerValue()}"~

Callbacks

Just after the speed has been updated, Speedometer invokes the autocommand
event `SpeedometerUpdate`. You may get the updated results by calling
`SpeedometerValue()`. For example, to update

  autocmd! User SpeedometerUpdate echon~

==============================================================================
Options                                                    *speedometer-options*

`speedometer#lookback_seconds` (default: 10)

The length of the period over which speed is calculated.

==============================================================================
Custom formatting                                       *speedometer-formatting*

By default, Speedometer renders your speed in three digits. You can customize
this by defining and referencing your own formatter, like this:

  speedometer#formatter = 'my_formatter'~

The referenced formatter is an autoloaded function that returns a string,
based on a dictionary containing a few keys:

- `wpm` is the current computed speed.

- `words` is the current word count of the buffer. For purposes of measuring
  words per minute, this is equal to the number of characters divided by five.

- `seconds` is the number of seconds over which speed has been measured,
  ranging from 1 to `speedometer#lookback_seconds`.

- `updates` is a monotonic counter of the number of times speed has been
  computed.

As an example:

  function speedometer#formatters#my_formatter#to_string(metrics) ~
    return printf('%fwpm over %ds seconds', a:metrics.wpm, a:metrics.seconds) ~
  endfunction ~

A reasonable place for this definition would be in a file called
`autoload/speedometer/formatters/my_formatter.vim`.

==============================================================================
Bugs                                                          *speedometer-bugs*

If you use `SpeedometerValue()` inside `'rulerformat'`, vim won't update it
until you type something, even with any of the tricks in the help for
`'statusline'`. A workaround that seems to work is to echo nothing:

  autocmd! User SpeedometerUpdate echon~
